// https://www.jenkins.io/doc/pipeline/tour/environment/
// jenkins snipets
pipeline {
    agent any

		// chek git repo every minute
    triggers {
		// 	// every 1 minute
		// 	// pollSCM('H/2 * * * *')
			pollSCM( '* * * * *')
		}

    environment {
        PROJECT = "docker.page"
        DESCRIPTIONS = "GitHub -> Jenkins -> Docker -> -> AWS"
        OWNER = "extsand"
        GIT_REPO = "https://github.com/extsand/terra.weather.git"  
				GIT_REPO_SSH = "git@github.com:extsand/terra.weather.git"
				GIT_BRANCH = "dep_db"

				DOCKER_HUB_IMAGE_NAME = "extsand/terra.weather_docker:latest"

				ENV_FILE = ".env" 

				DEPLOY_INSTANCE = "AWS_APP-3.66.186.119"
				DB_INSTANCE = "AWS_DB-3.123.203.61"
				APP_INFO = "3.66.186.119:80"
				WORK_DIR = "/home/ubuntu/docker_workplace"
		
    } 

		options {
        buildDiscarder(logRotator(
					numToKeepStr: '3', 
					artifactNumToKeepStr: '3'
					))
        timestamps()
    }

    stages {
        stage('Introducting') {
            steps {
                echo "Hello User!\n It is ${PROJECT} project.\n We will use pipeline ${DESCRIPTIONS}.\n You can see files in ${GIT_REPO}."
            }
        }

				stage('Clone Git Repository'){
					steps {
						echo '======== Clone app from git Repository ============='
						echo "Get app files from ${GIT_REPO}"
						git branch: "${GIT_BRANCH}", 
						credentialsId: 'extsand_git_credentials', 
						url: "${GIT_REPO_SSH}"

					}
				}
				
				stage('DockerHub login'){
					steps{
						echo '============ Log in Docker Hub ===================='
						withCredentials(
							[usernamePassword(
									credentialsId: 'dockerhub_extsand', 
									passwordVariable: 'dockerhub_password', 
									usernameVariable: 'dockerhub_username')]) {
								// Login to dockerhub
								sh 'docker login -u $dockerhub_username -p $dockerhub_password '
						}
					}
				}

				stage('Create docker image'){
					steps {
						echo '=========== Start docker to build docker image ============'
						dir ('./'){
							sh 'docker build -t $DOCKER_HUB_IMAGE_NAME . '
						}
					}
				}		

				stage('Publish docker image'){
					steps {
						echo '=========== Push Docker image to DockerHub ============'
						sh 'docker push $DOCKER_HUB_IMAGE_NAME'
					}
				}

				stage('Upload docker to Global server'){
					steps {
						echo '=========== Set Docker image in Deploy server ============'
						sshPublisher(
							publishers: [
								sshPublisherDesc(
									configName: "${DEPLOY_INSTANCE}", 
									transfers: [
										sshTransfer(
											cleanRemote: false, 
											excludes: '', 
											execCommand: "cd ${WORK_DIR}; \
																		docker-compose down; \
																		docker rmi -f ${DOCKER_HUB_IMAGE_NAME}; \
																		docker-compose build; 	\
																		docker-compose up -d",
											execTimeout: 1200000, 
											flatten: false, 
											makeEmptyDirs: false, 
											noDefaultExcludes: false, 
											patternSeparator: '[, ]+', 
											remoteDirectory: '', 
											remoteDirectorySDF: false, 
											removePrefix: '', 
											// Get secrets from Git To jenkins
											sourceFiles: "docker-compose.yaml, ${ENV_FILE}"
											
										)
									], 
									usePromotionTimestamp: false, 
									useWorkspaceInPromotion: false, 
									verbose: true
								)
							]
						)
					}
				}
    }


		post {
          success {            
           withCredentials([string(
						credentialsId: 'chat_id', 
						variable: 'TELEGRAM_CHAT_ID'
						), 
						string(
						credentialsId: 'Bot_TOKEN', 
						variable: 'TELEGRAM_BOT_TOKEN')]) {
							sh  ("""
								curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage -d chat_id=${TELEGRAM_CHAT_ID} -d parse_mode=markdown -d text='
								*Build Application was Successful*	
								${PROJECT}
								${GIT_REPO}
								Docker Image: ${DOCKER_HUB_IMAGE_NAME}
								Instance: ${DEPLOY_INSTANCE}
								[Application address](http://${APP_INFO})					
								'
							""")
						}	
					}

					aborted {            
           withCredentials([string(
						credentialsId: 'chat_id', 
						variable: 'TELEGRAM_CHAT_ID'
						), 
						string(
						credentialsId: 'Bot_TOKEN', 
						variable: 'TELEGRAM_BOT_TOKEN')]) {
							sh  ("""
								curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage -d chat_id=${TELEGRAM_CHAT_ID} -d parse_mode=markdown -d text='
								*Build Application was ABORTED*
								*CHECK JENKINS CONSOLE*	
								[Jenkins console](http://192.168.1.7:8080/)
								${PROJECT}
								${GIT_REPO}
								Docker Image: ${DOCKER_HUB_IMAGE_NAME}
								Instance: ${DEPLOY_INSTANCE}
								[Application address](http://${APP_INFO})					
								'
							""")
						}	
					}

					failure {            
           withCredentials([string(
						credentialsId: 'chat_id', 
						variable: 'TELEGRAM_CHAT_ID'
						), 
						string(
						credentialsId: 'Bot_TOKEN', 
						variable: 'TELEGRAM_BOT_TOKEN')]) {
							sh  ("""
								curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage -d chat_id=${TELEGRAM_CHAT_ID} -d parse_mode=markdown -d text='
								*Build Application was FAILURE*
								*CHECK JENKINS CONSOLE*	
								[Jenkins console](http://192.168.1.7:8080/)
								${PROJECT}
								${GIT_REPO}
								Docker Image: ${DOCKER_HUB_IMAGE_NAME}
								Instance: ${DEPLOY_INSTANCE}
								[Application address](http://${APP_INFO})					
								'
							""")
						}	
					}
		}
}